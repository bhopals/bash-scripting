================================================
            Chapter 1
================================================
echo $BASH_VERSION  - (Bash version)
What is BASH - Bourne Again SHell - It is a very interactive command line interpreter. (1989)

pwd - Present working directory

ls - Listing of the directory
ls -l (listing of the directory with folder and files details)

cp <file_to_copy> <new_name_of_file> (copy files)
rmdir/ mkdir
cat <file_name> (to read the file content)
tail <file_name> ( To see the end content of long file)
head <file_name> ( To see starting content of the file)

rm * (delete all files inside the folder)

Bash provides handy shortcuts called "Expansions"
~ ( Tilde expansions)
{} (Brace expansions)
touch file_{1..100} (create file_<number> from 1 to 100.
echo {A..z} ( print A,B....a,b,...z)
echo {1..20..2} (print 1,3,7,....19)

PIPES
---------------------------------------
ls 

ls | more  ( to see the output page by page)
rm ../otherfolder/*
mkdir test
cp -v * ../<copy-folder>

To redirect the output bash has ">" 
ls > abc.txt (It will copy the listing to "abc.txt" file)

Grep
To search any content in the log

grep "Search keyword" <file_name>
grep --color-auto "Search Keyword" <file_name>  
example : grep --color=auto "Bhopal" server.log

export GREP_OPTIONS = --color=auto  ( It will set auto color for all the grep commands, hence no need to mention explicitly)

grep -i system-error auth.log

use of "awk" - to extract data by line number from any file


Interperter Directive ( #!), which is also called "hashbang" or "shebang"  #!/bin/bash

#comment - To add comment
#! <name> - This is the bash script or executable

Steps to create any BASH File
-------------------------------------------------------------------------
	1. nano test.sh ( here nano is the default editor)
	2. The editor pops up and then the first line would be #!/bin/bash
	3. After that we put "#" and comments describing what bash does
    4. Then we write our Linux Commands, in this example we simply write "ls"
    5. CTRL + O to save and CTRL+X to exit the editor
    6. To run the "BASH" we simply type "bash "file_name"    OR "./my.sh"
  


==============================================================
                CHAPTER 2
==============================================================

echo - ( to display the text ). There are 3 ways to execute echo
--------------------------------------------------------------------
	1. echo $greeting, world \(planet\) !  - In this case "escaping is required of special characters
    2. echo '$greeting world (planet) 1'   - It will treat complete content as STRING
    3. echo "$greeting world (planet) 1"  - Double Quotes are preferable and used. It will automatically take care of escaping and dynamic variables"

    if you put space around "=" when declaring variables then it will give an error while executing, so ensure no extra spaces added in the script.

Example:
------------------------------
#!/bin/bash
#This is first script file
greeting="Hello"
echo "$greeting" from my side

then CTRL+O and CTRL+x


Variable Declaration
----------------------------------
If variable values have SPACE then put double quotes("") around it, otherwise skip.
Example : 
a=Hello
c=16
b="Good Morning"
echo $a $b $c
and when use the variables, we need to put "$" sign in front of it.


Adding Attributes (data type)  to Variable
----------------------------------------------------
declare -i d=123 #d is an Integer
declare -r e=456 #e is read-only

Built-in Varibles ( Already available variables)
-----------------------------------------------------
$HOME  / $PWD / $HOSTNAME / $BASH_VERSION / $SECONDS
$0 - Returns the name of the script

Command Substitution - Assign/hold the intermediate result
-----------------------------------------------------------
d=$(pwd) - Here the command would be execute within the paranthesis and the outcome would be assigned into the variable "d"

echo $d (this will print the Present Working Directory)

example ( A complex result is evaluated and then stored in "a" here)
a=$(ping -c 1 example.com | grep 'bytes from') | cut -d = -f 4)


Arithmetic Expression (())
----------------------------------------
Wrap the exression in double paranthesis 
example:
d=10
e=$((d+2))

OR 

((e++)), ((e+=5))


Comparison Operations [[]] 
-----------------------------------------
* Make sure to put space after the brackets
* Instead of compartor operation we need to use string sytax
example: Instead of ">", "gt" should be used and so on 
[[ "cat"=="cat" ]]
[[  4 gt 5]]

String Manipulations
----------------------------------------------
a="Hello"
b="Bhopal Singh"
c=$a$b
echo $c

echo ${#a} - Will print String Length
d=${c:3} - Substring

String Replace 
-------------------
fruit="apple banana banana cherry"
echo ${fruit/banana/durian} - So here first varible is String, second is the Parameter to replace, and third is parameter with String to be replaced with.

"#" to match start of the STRING and "%" for end of the string match

Helper Methods
-----------------------------------------------
1. DATE - Date Formatting 
    date - This would return todays data with current timestamp
    To have it in precise format we need to pass the "date + format parameter"
    Example : data +"%d-%m-%Y" - (22-01-2019)

2. PRINTF - Printing Text with extra options provided
    printf "Name:\t%s\nID:\t%04d\n" "Scott" "12"

    *Here "\t" for the TAB, "\n" for the new Line, "%s","%d" is place holder to replace STRING and Number respectively, and at the end 2 parameters which we are going to pass/substitute in the Formatted sytax
    "%04d" - is sytax for Four Digit Padded numeric value

    Output would be:
    -----------------
    Name:   Scott
    ID:     0012

    printf -v d "TEST"  (Here "d" works as a variable to store values)
    echo $d

    Example:
    ---------------------------------
    today=$(date +"%d-%m-%Y")
    time=$(date +"%H:%M:%S")
    printf -v d "Current User:\t%s\n Date:\t\t%s @ %s\n" $USER $today $time 
    echo "$d"  

    OUTPUT
    ---------------------
    Current User:   BHOPAL
    Date:           21-01-2019 21:16:55


    Working with ARRAYS
    ----------------------------------------------
    To declare array we need to use paranthesis "()" and provide without comma separated elements value
    example:
    b=("Apple" "Banana" "Kiwi")
    echo ${b[2]}
    b[5]="Mango" //also work

    To add any element at the end use "@" as index


    READING and WRITING TEXT Files
    ----------------------------------------------------
    Writing: (">")
    echo "SomeTEXT" > file.txt  (Will replace the content of the file to provided one)
    echo "SomeTEXT" >> file.txt  (Add provided content at the end of FILE without overwriting anything)

    READING: ("<")
    cat < file_name.txt (Will display the content)
    cat << file_name.txt (end of the file content)


    Use "HERE" document
    -----------------------------------------------------

